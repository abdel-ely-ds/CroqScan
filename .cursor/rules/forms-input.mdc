---
description: Forms and input field best practices with validation
alwaysApply: true
---

# Forms & Input Best Practices

## Always Dispose Controllers

```dart
class _MyFormState extends State<MyForm> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _emailFocusNode = FocusNode();
  final _passwordFocusNode = FocusNode();

  @override
  void dispose() {
    // ⚠️ CRITICAL: Always dispose controllers and focus nodes
    _emailController.dispose();
    _passwordController.dispose();
    _emailFocusNode.dispose();
    _passwordFocusNode.dispose();
    super.dispose();
  }
}
```

## Use Form + TextFormField for Validation

```dart
class _MyFormState extends State<MyForm> {
  final _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formKey,
      child: Column(
        children: [
          TextFormField(
            controller: _emailController,
            focusNode: _emailFocusNode,
            decoration: InputDecoration(
              labelText: AppLocalizations.of(context)!.emailLabel,
              hintText: 'user@example.com',
            ),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return AppLocalizations.of(context)!.emailRequired;
              }
              if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
                return AppLocalizations.of(context)!.emailInvalid;
              }
              return null;
            },
            textInputAction: TextInputAction.next,
            onFieldSubmitted: (_) => _passwordFocusNode.requestFocus(),
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: () {
              if (_formKey.currentState!.validate()) {
                // Process data
              }
            },
            child: Text(AppLocalizations.of(context)!.submit),
          ),
        ],
      ),
    );
  }
}
```

## Debounce Input Changes

Avoid lag by debouncing high-frequency input changes:

```dart
import 'dart:async';

class _SearchFieldState extends State<SearchField> {
  final _searchController = TextEditingController();
  Timer? _debounce;

  @override
  void initState() {
    super.initState();
    _searchController.addListener(_onSearchChanged);
  }

  void _onSearchChanged() {
    if (_debounce?.isActive ?? false) _debounce!.cancel();

    _debounce = Timer(const Duration(milliseconds: 300), () {
      // Perform search with _searchController.text
      widget.onSearch(_searchController.text);
    });
  }

  @override
  void dispose() {
    _debounce?.cancel();
    _searchController.dispose();
    super.dispose();
  }
}
```

## Focus Navigation

Manage focus order for better UX:

```dart
// Use textInputAction to guide navigation
TextFormField(
  textInputAction: TextInputAction.next,
  onFieldSubmitted: (_) => nextFocusNode.requestFocus(),
)

// Or use FocusScope for complex forms
FocusScope.of(context).requestFocus(nextFocusNode);
FocusScope.of(context).unfocus(); // Dismiss keyboard
```

## Avoid Heavy Rebuilds on Keystrokes

```dart
// ❌ BAD: Rebuilds entire form on each keystroke
TextField(
  onChanged: (value) {
    setState(() {
      _searchQuery = value;
    });
  },
)

// ✅ GOOD: Use controller and update only when needed
TextField(
  controller: _searchController,
  // Process on submit or with debounce
)
```

## Input Validation Patterns

```dart
// Email validation
String? validateEmail(String? value) {
  if (value == null || value.isEmpty) return 'Email required';
  if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
    return 'Invalid email format';
  }
  return null;
}

// Password validation
String? validatePassword(String? value) {
  if (value == null || value.isEmpty) return 'Password required';
  if (value.length < 8) return 'Password must be at least 8 characters';
  return null;
}

// Phone validation
String? validatePhone(String? value) {
  if (value == null || value.isEmpty) return 'Phone required';
  if (!RegExp(r'^\+?[\d\s-()]+$').hasMatch(value)) {
    return 'Invalid phone format';
  }
  return null;
}
```
